em portugues do brasil

Tenho essa estrutura usando Vite com React em Java script.

Estrutura:

/src
  /assets
	react.jsx
  /componetes
	App.css
	App.jsx
	Button.jsx
    Message.jsx
  index.css
  main.jsx
  
  Arquivo: App.css
  
  :root {
  --cor-mensagem-primaria: #3b4a54;
  --cor-mensagem-secundaria: #00a884;
  --cor-hover: #8b8b8b78;
  --loader-background-color: #EEEEEE;
  --loader-highlight-color: #DEDEDE;
 }
 
 html, body, .chat {
   height: 90vh;
 }
 
 .header {
   position: relative;
   font-size: 28px;
   border-bottom: 1px dotted grey;
   padding: 5px;
 }
 
 .header h3 {
   margin: 0;
 }
 
 .header button {
   position: absolute;
   top: 10px;
   right: 10px;
   border-radius: 50%;
   width: 35px;
   height: 35px;
   border: none;
   background: none;
   display: flex;
   flex-direction: column;
   align-items: center;
   justify-content: center;
 }
 
 .header button:hover {
   background: var(--cor-hover);
 }
 
 .header button svg {
   width: 20px;
   height: 20px;
 }
 
 .chat {
   width: 400px;
   border: 1px solid gray;
   border-radius: 5px;
   margin: 0 auto;
   padding: 10px;
   background-color: black;
   color: white;
 }
 
 ul {
   list-style: none;
   padding: 0px;
 }
 
 li {
   padding: 10px 30px 10px 10px;
   border: 1px solid transparent;
   border-radius: 10px;
   margin-bottom: 5px;
   background-color: var(--cor-mensagem-primaria);
   color: white;
   width: fit-content;
 }
 
 p {
   padding: 0;
   margin: 0;
 }
 
 .message {
   position: relative;
 }
 
 .message .options,
 .message .visualized {
   position: absolute;
 }
 
 .message .options {
   top: 2px;
   right: 5px;
   visibility: hidden;
   border-radius: 50%;
   width: 20px;
   height: 20px;
   display: flex;
   flex-direction: column;
   justify-content: center;
   align-items: center;
 }
 
 .message:hover .options {
   visibility: visible;
 }
 
 .message .options:hover {
   background-color: var(--cor-hover);
 }
 
 .message .visualized {
   bottom: 2px;
   right: 10px;
 }
 
 svg {
   width: 10px;
   height: 10px;
   fill: white;
 }
 
 .message .options {
   margin: 0;
   padding: 0;
   border: none;
   background-color: transparent;
 }
 
 
 .visualized.yes svg {
   fill: #74C0FC;
 }
 
 .message.eu {
   margin-left: auto;
   background-color: var(--cor-mensagem-secundaria);
 }

.skeleton-loader {
  width: 100%;
  height: 40px;
  background: linear-gradient(90deg, var(--loader-background-color) 25%, var(--loader-highlight-color) 50%, var(--loader-background-color) 75%);
  background-size: 200% 100%;
  animation: loading 2s infinite ease-in-out;
  border-radius: 8px;
  margin-bottom: 20px;
}

@keyframes loading {
  0% {
      background-position: 200% 0;
  }
  100% {
      background-position: -200% 0;
  }
}

Arquivo: App.jsx

import React from 'react';
import Button from './Button';
import Message from './Message';
import './App.css';

const App = () => {
  const [loading, setLoading] = React.useState(true);
  const [mensagens, setMensagens] = React.useState([
    {
        mensagem: 'Oi...',
        visualizado: true,
        remetente: false,
    },
    {
        mensagem: 'Tu não me ama mais?',
        visualizado: true,
        remetente: false,
    },
    {
        mensagem: 'Oi, boa tarde.',
        visualizado: false,
        remetente: true,
    },
    {
        mensagem: 'Quem é você mesmo?',
        visualizado: false,
        remetente: true,
    },
    {
        mensagem: 'Eu não lembro...',
        visualizado: false,
        remetente: true,
    },
]);

  return (
    <div className="chat">
      <div className="header">
        <Button />
        <h3>Meu Chat</h3>
      </div>
      <div className="content">

        {loading === true && (
          <div>
            <div className='skeleton-loader'></div>
            <div className='skeleton-loader'></div>
            <div className='skeleton-loader'></div>
          </div>
        )}
        {
          loading === false && (
            <ul>
              {
                mensagens.map(mensagem => (
                  <Mensagem
                    mensagem={mensagem.mensagem}
                    visualizado={mensagem.visualizado}
                    remetente={mensagem.remetente}
                  />
                )
                )
              }

            </ul>
          )
        }

      </div>
    </div>
  );
};

export default App;


Arquivo: Button.jsx

import React from 'react';
import './App.css';

const Button = () => {
  return (
    <button>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 128 512">
        <path d="M64 360c30.9 0 56 25.1 56 56s-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56zm0-160c30.9 0 56 25.1 56 56s-25.1 56-56 56s-56-25.1-56-56s25.1-56 56-56zM120 96c0 30.9-25.1 56-56 56S8 126.9 8 96S33.1 40 64 40s56 25.1 56 56z" />
      </svg>
    </button>
  );
};

export default Button;

Arquivo: Message.jsx

import React from 'react';
import './App.css';
const Message = ({ message }) => {
  const { text, sender, status } = message;

  return (
    <li className={`message ${sender}`}>
      <button className="options">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z" />
        </svg>
      </button>
      <span className={`visualized ${status === 'lido' ? 'yes' : 'nlido'}`}>
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
          <path d="M374.6 86.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 178.7l-57.4-57.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l80 80c12.5 12.5 32.8 12.5 45.3 0l160-160zm96 128c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 402.7 86.6 297.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0l256-256z" />
        </svg>
      </span>
      <p>{text}</p>
    </li>
  );
};

export default Message;


Você deve adaptar o seu exercício da aula anterior (códigos acima) para que os dados da mensagem sejam consultados via uma API. Você deve entregar no trabalho tanto a UI quanto o Server. 

